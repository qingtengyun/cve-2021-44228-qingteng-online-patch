import org.apache.logging.log4j.LogManager;

import java.io.Serializable;
import java.lang.reflect.Field;
import java.text.SimpleDateFormat;
import java.util.GregorianCalendar;
import java.util.HashMap;

public class Hotfix implements Serializable {

	static {

		try {
			Object obj = LogManager.getLogger();
			Field contextF = obj.getClass().getDeclaredField("context");
			contextF.setAccessible(true);
			Object context = contextF.get(obj);
			Field configurationF = context.getClass().getDeclaredField("configuration");
			configurationF.setAccessible(true);
			Object configuration = configurationF.get(context);
			Field substF = configuration.getClass().getSuperclass().getDeclaredField("subst");
			substF.setAccessible(true);
			Object subst = substF.get(configuration);
			Field variableResolverF = subst.getClass().getDeclaredField("variableResolver");
			variableResolverF.setAccessible(true);
			Object variableResolver = variableResolverF.get(subst);
			Field strLookupMapF = variableResolver.getClass().getDeclaredField("strLookupMap");
			strLookupMapF.setAccessible(true);
			HashMap strLookupMap = (HashMap) strLookupMapF.get(variableResolver);
			strLookupMap.remove("jndi");
		}catch (Exception e){
			try{
				Object obj = LogManager.getLogger();
				Field contextF = obj.getClass().getDeclaredField("context");
				contextF.setAccessible(true);
				Object context = contextF.get(obj);
				Field configurationF = context.getClass().getDeclaredField("configuration");
				configurationF.setAccessible(true);
				Object configuration = configurationF.get(context);
				Field substF = configuration.getClass().getSuperclass().getDeclaredField("subst");
				substF.setAccessible(true);
				Object subst = substF.get(configuration);
				Field variableResolverF = subst.getClass().getDeclaredField("variableResolver");
				variableResolverF.setAccessible(true);
				Object variableResolver = variableResolverF.get(subst);
				Field strLookupMapF = variableResolver.getClass().getDeclaredField("lookups");
				strLookupMapF.setAccessible(true);
				HashMap strLookupMap = (HashMap) strLookupMapF.get(variableResolver);
				strLookupMap.remove("jndi");
			}
			catch (Exception e1){
				try {
					Object obj = LogManager.getLogger();
					Field contextF = obj.getClass().getDeclaredField("context");
					contextF.setAccessible(true);
					Object context = contextF.get(obj);
					Field configurationF = context.getClass().getDeclaredField("config");
					configurationF.setAccessible(true);
					Object configuration = configurationF.get(context);
					Field substF = configuration.getClass().getSuperclass().getDeclaredField("subst");
					substF.setAccessible(true);
					Object subst = substF.get(configuration);
					Field variableResolverF = subst.getClass().getDeclaredField("variableResolver");
					variableResolverF.setAccessible(true);
					Object variableResolver = variableResolverF.get(subst);
					Field strLookupMapF = variableResolver.getClass().getDeclaredField("lookups");
					strLookupMapF.setAccessible(true);
					HashMap strLookupMap = (HashMap) strLookupMapF.get(variableResolver);
					strLookupMap.remove("jndi");
				} catch (Exception e2){

				}
		}

		}
		System.out.println(new SimpleDateFormat("yyyy-MM-dd hh:mm:ss").format(new GregorianCalendar().getTime())
				+ " ** Hot-patched by www.qingteng.cn - {} **");

	}

	public Hotfix() { }

}
